`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2021/12/18 18:52:49
// Design Name: 
// Module Name: mips_CP0
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

`define im      SR[15:10] // for blocking the interrupt, 1for allowing, 0 for denying
`define ie      SR[0]   // the en for overall interrupt 
`define exl     SR[1]   // for exception . 0 for allowing interrupt. 1 fo in exception and  denyingr 
`define ip      Cause[15:10] // for the external interruption
`define exccode Cause[6:2] //exception code
`define bd      Cause[31] 

module mips_CP0(
    input clk,
    input reset,
    input [31:0]Instr,
//    input [4:0] A1, //for mfc0, reading CP0 number
//    input [4:0] A2, //for mtc0. writing Cp0,
    input [31:0] WDin, // the wd for cp0, used by mtc0
    input [31:0] PC, 
    input Delay,
    input [4:0] EXCCodeIn,
    input [5:0] HWInt, // device interruption, for external
    input EXLClr, //set the exl, generated by eret
    output Request,
    output [31:0]EPCOut,
    output [31:0]WDOut,
    output Response
    );
    wire [4:0]A1, A2;
    
    reg [31:0]SR, Cause, EPC, PRId;
    wire InterruptRequest, ExceptionRequest, CP0Write;
    wire [31:0]EPC_New;
    
    Decoder decode_CP0(
        .Instr(Instr),
        .CP0Write(CP0Write),
        .rd(A1)
    );
    assign A2 = A1;
    assign EPC_New = (Request === 1'b1)? (Delay === 1'b1 ? (PC - 32'd4) : PC):EPC;
    assign ExceptionRequest = !`exl && (| EXCCodeIn);
    assign InterruptRequest = !`exl && `ie && (| (HWInt & `im));
    assign Request = (ExceptionRequest) | (InterruptRequest);
    assign Response = !`exl && `ie && (HWInt[2] & SR[12]);
    
    assign EPCOut = {EPC_New[31:2], 2'b00};
    assign WDOut = (A1 == 12) ? SR :
                   (A1 == 13) ? Cause :
                   (A1 == 14) ? EPCOut :
                   (A1 == 15) ? PRId :0;
                   
    initial 
    begin
        SR <= 0;
        Cause <= 0;
        EPC <= 0;
        PRId <= 32'h2002_0907;   
    end         
        
    always@(posedge clk or posedge reset)
    begin
        if(reset)
        begin
            SR <= 0;
            Cause <= 0;
            EPC <= 0;
            PRId <= 32'h2002_0907; 
        end
        else
        begin
            if(EXLClr) `exl <= 1'b0;
            //else if(EXLSet) `exl <= 1'b1;
            if(Request) 
            begin
                `exccode <= InterruptRequest ? 5'd0 : EXCCodeIn;
                `exl <= 1'b1;
                EPC <= EPC_New;
                `bd <= Delay;
            end 
            else if(CP0Write) 
            begin
                if(A2 == 12) SR <= WDin;
                else if(A2 == 14) EPC <= WDin;
            end
            `ip <= HWInt;
        end 
    end
endmodule
